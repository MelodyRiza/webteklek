WORLD WIDE WEB (WWW)
  - The world wide web (www) is the most important establishment because it is the collection of web resources, either static resources
  or dynamic resources that we can access via the internet.
  
  - The world wide web (www) was established around 1990's and it is approximately 30 years old from now. It uses a client server architecture which means each computer or process on the network is either a client or a server.
  
 Who Invented the World Wide Web?
  The world wide web is invented by Sir Tim Berners-Lee, a British computer scientist that was born in London. He invented the web in
1989 while working at CERN (Conseil Européen pour la Recherche Nucléaire) a world-class fundamental physics research organization in Europe. Sir Tim Berners-Lee is also the director of the world wide web consortium, founded in 1994. The world wide web consortium is a global web standards organization to lead the web to it's full potential.

  In October of 1990, Sir Tim Berners-Lee invented the 3 corner stone fundamental technologies that remain the foundation of today’s web
  - HTML: HyperText Markup Language. The markup (formatting) language for the web.
  - URI: Uniform Resource Identifier. A kind of “address” that is unique and used to identify to each resource on the web. It is also            commonly called a URL.
  - HTTP: Hypertext Transfer Protocol. Allows for the retrieval of linked resources from across the web.
  
                           ----------------------------------------------------------

  HYPERTEXT TRANSFER PROTOCOL (HTTP)
    - The hypertext transfer protocol (http) is used to access resources like hypertext, hypermedia on the world wide web.
    - Jointly developed by the W3C and the IETF (Internet Engineering Task force).
    Version History:
     HTTP 0.9 (for support of basic hypertext documents, 1991)
     HTTP 1.0 (extensions to support rich websites and scalability, RFC 1945, May 1996)
     HTTP 1.1 (developed to address performance limitations of HTTP 1.0, specified in Internet RFC 2068, January 1997)
     HTTP 2.0 (latest version and maintains backward compatibility with HTTP 1.1 but offers additional performance enhancements,
                RFC 7540, May 2015)
  
  HTTP Fundamentals:
  - http is based on a client server architecture servers.
  - uses a request-response standard protocol (the client will send an http request message).
  - a "stateless" communication protocol means, the HTTP connection is dropped once the request has been made. Servers do not keep               information about clients in between requests.
  
  HTTP provides support for other functionalities such as:
  - cache control
  - language and character set specifications
  - content negotiation 
        allows the client to have preferences
  - content / transfer codings
        the message can be transmitted in compressed form
  - persistent connections
  - request pipelining / multiplexing
  - authorization and authentication
        to secure data
        
  HTTP Request Message
   -Request Line -  begins with a method token, followed by the Request-URI and the protocol version, and ending with CRLF. The elements    are separated by SP characters. No CR or LF is allowed except in the final CRLF (Carriage Return, Line Field) sequence.
   example:
        Request-Line = Method SP Request-URI SP HTTP-Version CRLF 
        
    A request line consists of:
      *Method -  indicates the method to be performed on the resource identified by the Request-URI and it is case-sensitive.
        Request Methods:     // eto rin itable pwede rin
          GET - most commonly used http method that is used to retrieve information from the given server using a given URL
          POST - typically used in submitting HTML form data

          CONNECT - creates a tunnel to the server identified by a given URL
          PUT - use to generate data or resources
          HEAD - use to create end to end virtual connections
               - similar to the GET Method except that the server does not and must not return a message-body in the response.
               - response to head request may be cacheable.
          DELETE - for removing data or resources from the origin server
          OPTIONS - capabilities of the server
                  - method that represents a request information about the communication options available.
                  - responses to this method are cacheable.
          TRACE - performs a message loop back test along with the path to the target resource
        Method Properties:
           Safe Method: client does not request and does not expect (read-only method)  // eto pwedeng itable para organize
                        GET, HEAD, OPTIONs, TRACE
           Idempotent Methods: the result will exist
                                GET, HEAD, OPTIONS, TRACE, PUT, DELETE
           Cacheable Methods: allows us to store re use data for future use
                              GET, HEAD, POST 
      *Request Target
      *Protocol Version
   
  -Message Headers (general, request and/or entity headers)
         allows the client to pass additional information about the request, about the client itself, and the server
  -Empty Line (CRLF)
  -Message Body a.k.a payload (optional)
   
  HTTP Response Message
   -Status Line - consists of the protocol version followed by a numeric status code and its associated textual phrase, with each            element separated by SP characters. No CR or LF is allowed except in the final CRLF (Carriage Return, Line Field) sequence.
     example:
         Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF
 
       A status line consists of:
        *Protocol Version
        *Status Code
           - Informational (1xx)    //pwedeng link ng list ng mga status codes or itable natin
           - Success (2xx)
           - Redirection (3xx)
           - Client Error (4xx)
           - Server Error (5xx)
           - 200 OK
           - 400 Bad Request
           - 403 Forbidden
           - 404 Not Found
        *Reason Phrase
        
   -Message Headers (general, request and/or entity headers)
         allows the client to pass additional information about the request, about the client itself, and the server
   -Empty Line (CRLF)
   -Message Body a.k.a payload (optional)
   
   Http resources are identified using URIs or more specifically, Http URLs.
   Syntax of URIs (RFC 7230, section 2.7)
     Scheme - http or https is the protocol
     Authority - the domain name (www.inserthere.com)
     Port - technical "gate" used to access the resources on the web server (80 for http)
     Path - may refer to a root on the server (/path/to/webtech.html)
     Query -  a list of key/value pairs separated with the '&' symbol (?web1=value1&web2=value2)
     Fragment - short string of characters that refers to a resource that is subordinate to another, primary resource.
     
     HTTP EXTENSION
     example: 
        WEBDav (Web Distributed Authoring and Versioning)
                - allows clients to perform remote Web content authoring operations.
                - RFC 4918
                - some request methods: mkcol, copy, move, lock, unlock, propfind and proppatch.
                
                ------------------------------------------------------------
                
     HYPERTEXT MARKUP LANGUAGE (HTML)
       - language used to mark up documents in the world wide web
       - defines the structure and layout of a Web document by using a variety of tags and attributes.
       - application of SGML (Standard General mark up language (ISO 8879))
       - initially developed at CERN, then the IETF, then the W3C, and then also the 
         WHATWG (Web hypertext application technology working group)
         
     Version History:
        Pre-standardization
             - HTML tags by Sir Tim Berners-Lee, late 1991
             - HTML draft by Tim Berners-Lee and Dan Cannolly published by the IETF in mid 1993
        Standards
             - HTML 2.0 (RFC 18866, nov 1995)         // maganda yata dito i link nlng natin yung pag pipindutin sa site nila ganern or
             - HTML 3.2 (W3C Recommendation, Jan 1997)          kailagan pa tyon din gagawa non?
             - HTML 4.0 (W3C Recommendation, Dec 1997)
             - HTML 4.01 (W3C Recommendation,Dec 1999)
               
Bibliography:
History of the Web. (n.d.). Retrieved February 23, 2018, from https://www.webfoundation.org/about/vision/history-of-the-web/
Sir Tim Berners-Lee. (n.d.). Retrieved February 23, 2018, from https://webfoundation.org/about/sir-tim-berners-lee/
(n.d.). Retrieved February 24, 2018, from https://www.w3.org/Protocols/rfc2616/rfc2616.html
Mitchell, B. (n.d.). What Does HTTP Mean? Retrieved February 24, 2018, from https://www.lifewire.com/hypertext-transfer-protocol-817944
Identifying resources on the Web. (n.d.). Retrieved February 24, 2018, from https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web
Shannon, R. (n.d.). HTML Source : HTML Tutorials. Retrieved February 24, 2018, from http://www.yourhtmlsource.com/starthere/historyofhtml.html        
